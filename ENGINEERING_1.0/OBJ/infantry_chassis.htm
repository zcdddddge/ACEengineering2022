<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\infantry_chassis.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\infantry_chassis.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jul 24 17:51:53 2021
<BR><P>
<H3>Maximum Stack Usage =        576 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
referee_read_data &rArr; fifo_read_buff
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from can_1_receive.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from can_2_receive.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from usart3.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from uart4.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from usart1.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from usart6.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from usart1.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from time.o(i.TIM2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from time.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from imu.o(i.UART4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart1.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from vl53l0.o(i.USART6_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[70]">calibrate_task</a> from calibrate_task.o(i.calibrate_task) referenced from init.o(i.sys_task)
 <LI><a href="#[72]">cap_timer_callback</a> from capacitor_control.o(i.cap_timer_callback) referenced from timer_task.o(i.timer_send_create)
 <LI><a href="#[61]">chassis_can1_callback</a> from can_1_receive.o(i.chassis_can1_callback) referenced from chassis_app.o(i.chassis_app_init)
 <LI><a href="#[62]">chassis_can2_callback</a> from can_2_receive.o(i.chassis_can2_callback) referenced from chassis_app.o(i.chassis_app_init)
 <LI><a href="#[64]">chassis_rc_callback</a> from rc.o(i.chassis_rc_callback) referenced from chassis_app.o(i.chassis_app_init)
 <LI><a href="#[63]">chassis_rc_lost_time</a> from rc.o(i.chassis_rc_lost_time) referenced from chassis_app.o(i.chassis_app_init)
 <LI><a href="#[65]">chassis_task</a> from chassis_task.o(i.chassis_task) referenced from chassis_app.o(i.chassis_app_init)
 <LI><a href="#[6d]">detect_task</a> from detect_task.o(i.detect_task) referenced from init.o(i.sys_task)
 <LI><a href="#[66]">gimbal_can1_callback</a> from can_1_receive.o(i.gimbal_can1_callback) referenced from gimbal_app.o(i.gimbal_app_init)
 <LI><a href="#[67]">gimbal_can2_callback</a> from can_2_receive.o(i.gimbal_can2_callback) referenced from gimbal_app.o(i.gimbal_app_init)
 <LI><a href="#[68]">gimbal_rc_lost_time</a> from can_2_receive.o(i.gimbal_rc_lost_time) referenced from gimbal_app.o(i.gimbal_app_init)
 <LI><a href="#[69]">gimbal_task</a> from gimbal_task.o(i.gimbal_task) referenced from gimbal_app.o(i.gimbal_app_init)
 <LI><a href="#[6f]">outctl_task</a> from security_task.o(i.outctl_task) referenced from init.o(i.sys_task)
 <LI><a href="#[73]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[6a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[74]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[71]">referee_read_data</a> from referee_deal.o(i.referee_read_data) referenced from timer_task.o(i.timer_receive_create)
 <LI><a href="#[6e]">safecheck_task</a> from security_task.o(i.safecheck_task) referenced from init.o(i.sys_task)
 <LI><a href="#[6c]">services_task</a> from init.o(i.services_task) referenced from init.o(i.start_task)
 <LI><a href="#[6b]">shoot_task</a> from shoot_task.o(i.shoot_task) referenced from shoot_task.o(i.shoot_app_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[75]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[76]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1fb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1fc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1fd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1fe]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ff]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[200]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[201]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[202]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[203]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[204]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[205]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[206]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[207]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[208]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[209]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[20f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[210]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[211]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[212]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[213]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[214]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[215]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[216]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[217]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[218]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[219]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[21a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[21b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[21c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[21d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[82]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[21e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[84]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1e6]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12c]"></a>arm_cos_f32</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_calculate
</UL>

<P><STRONG><a name="[1c5]"></a>arm_sin_f32</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_calculate
</UL>

<P><STRONG><a name="[21f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_read_data
</UL>

<P><STRONG><a name="[87]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[220]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8a]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[228]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[81]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, can_1_receive.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can_2_receive.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>CAN_ClearFlag</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>CAN_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
</UL>

<P><STRONG><a name="[d8]"></a>CAN_FilterInit</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
</UL>

<P><STRONG><a name="[90]"></a>CAN_GetITStatus</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>CAN_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
</UL>

<P><STRONG><a name="[d7]"></a>CAN_Init</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
</UL>

<P><STRONG><a name="[93]"></a>CAN_Receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
</UL>

<P><STRONG><a name="[cf]"></a>CAN_Transmit</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_cap_setmsg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_yaw_setmsg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_sensor_setmsg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_gimbal_setmsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_gimbal_setmsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_function_setmsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_flip_setmsg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_rc_setmsg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_mk_setmsg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_4002_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_syaw_setmsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_spitch_setmsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_rescue_setmsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_setmsg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_gimbal_fire
</UL>

<P><STRONG><a name="[d0]"></a>CAN_TransmitStatus</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_TransmitStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_cap_setmsg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_yaw_setmsg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_sensor_setmsg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_gimbal_setmsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_gimbal_setmsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_function_setmsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_flip_setmsg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_rc_setmsg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_mk_setmsg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_4002_send
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_syaw_setmsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_spitch_setmsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_rescue_setmsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_setmsg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_gimbal_fire
</UL>

<P><STRONG><a name="[128]"></a>Chassis_Stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, chassis_behaviour.o(i.Chassis_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
</UL>

<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart3.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart4.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart1.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart6.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart1.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMA_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_dma_send
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_dma_send
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>DMA_DeInit</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[bb]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>DMA_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[1d7]"></a>DMA_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[b8]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[bd]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_dma_send
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_dma_send
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_gpio_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_two_zero_gpio_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_value
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_R_Val
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_L_Val
</UL>

<P><STRONG><a name="[188]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_off
</UL>

<P><STRONG><a name="[189]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_on
</UL>

<P><STRONG><a name="[160]"></a>Get_Auto_Control_Point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, visual.o(i.Get_Auto_Control_Point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[c5]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, crc.o(i.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[c7]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, crc.o(i.Get_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[9d]"></a>Get_Sensor_Val</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gpio_deal.o(i.Get_Sensor_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Sensor_Val &rArr; Return_Smooth_R_Val
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_R_Val
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_L_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[183]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>

<P><STRONG><a name="[185]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[186]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[184]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>NVIC_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[17e]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[af]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_gpio_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_two_zero_gpio_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[b0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[95]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[bf]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[c0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[117]"></a>Return_PYR_t</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.Return_PYR_t))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[164]"></a>Return_Sensor_t</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_deal.o(i.Return_Sensor_t))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[9e]"></a>Return_Smooth_L_Val</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio_deal.o(i.Return_Smooth_L_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Return_Smooth_L_Val
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sensor_Val
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[9f]"></a>Return_Smooth_R_Val</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gpio_deal.o(i.Return_Smooth_R_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Return_Smooth_R_Val
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sensor_Val
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[163]"></a>Return_VL53L0_t</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0.o(i.Return_VL53L0_t))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[12e]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, time.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[ad]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[ab]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1cd]"></a>TIM_OC1Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[1cf]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[1ce]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[1d0]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[1cc]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>

<P><STRONG><a name="[ae]"></a>UART4_GYRO_INIT_PC11_RX_PC10_TX</STRONG> (Thumb, 248 bytes, Stack size 104 bytes, uart4.o(i.UART4_GYRO_INIT_PC11_RX_PC10_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART4_GYRO_INIT_PC11_RX_PC10_TX &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, imu.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART4_IRQHandler &rArr; PYR_Deal &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PYR_Deal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, vl53l0.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d6]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>

<P><STRONG><a name="[be]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[b9]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[b3]"></a>USART_DeInit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[ba]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>USART_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>VL53L0_Data_Deal</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, vl53l0.o(i.VL53L0_Data_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L0_Data_Deal &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[c4]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, crc.o(i.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_read_data
</UL>

<P><STRONG><a name="[c6]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, crc.o(i.Verify_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_read_data
</UL>

<P><STRONG><a name="[1c6]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_in_processing
</UL>

<P><STRONG><a name="[85]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart2.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[18c]"></a>angle_limiting_int16</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rm_motor.o(i.angle_limiting_int16))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_actual_position
</UL>

<P><STRONG><a name="[c8]"></a>automatic_aiming_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, visual.o(i.automatic_aiming_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = automatic_aiming_init &rArr; usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[70]"></a>calibrate_task</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, calibrate_task.o(i.calibrate_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = calibrate_task &rArr; Gimbal_Location_Init &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_control_point
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Location_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.sys_task)
</UL>
<P><STRONG><a name="[a2]"></a>calibrate_task_hang</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i.calibrate_task_hang))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibrate_task_hang &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Location_Init
</UL>

<P><STRONG><a name="[cc]"></a>calibrate_task_remove_hang</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, init.o(i.calibrate_task_remove_hang))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibrate_task_remove_hang &rArr; vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
</UL>

<P><STRONG><a name="[ce]"></a>can1_cap_setmsg</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, chassis_app.o(i.can1_cap_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_cap_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cap_timer_callback
</UL>

<P><STRONG><a name="[d1]"></a>can1_chassis_gimbal_fire</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, chassis_app.o(i.can1_chassis_gimbal_fire))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_chassis_gimbal_fire &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
</UL>

<P><STRONG><a name="[d2]"></a>can1_chassis_setmsg</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, chassis_app.o(i.can1_chassis_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_chassis_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[d3]"></a>can1_flip_setmsg</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gimbal_app.o(i.can1_flip_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_flip_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[d4]"></a>can1_function_setmsg</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, gimbal_app.o(i.can1_function_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_function_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[d5]"></a>can1_gimbal_setmsg</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, gimbal_app.o(i.can1_gimbal_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_gimbal_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[d6]"></a>can1_mode_init</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, can.o(i.can1_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = can1_mode_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[da]"></a>can1_rescue_setmsg</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, chassis_app.o(i.can1_rescue_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_rescue_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[db]"></a>can1_spitch_setmsg</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, chassis_app.o(i.can1_spitch_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_spitch_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[dc]"></a>can1_syaw_setmsg</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, chassis_app.o(i.can1_syaw_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can1_syaw_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[dd]"></a>can2_4002_send</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, chassis_app.o(i.can2_4002_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_4002_send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_shooter_id1_17mm_speed_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_to_gimbal
</UL>

<P><STRONG><a name="[df]"></a>can2_chassis_mk_setmsg</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, chassis_app.o(i.can2_chassis_mk_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_chassis_mk_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_to_gimbal
</UL>

<P><STRONG><a name="[e0]"></a>can2_chassis_rc_setmsg</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, chassis_app.o(i.can2_chassis_rc_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_chassis_rc_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_to_gimbal
</UL>

<P><STRONG><a name="[e1]"></a>can2_gimbal_setmsg</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, gimbal_app.o(i.can2_gimbal_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_gimbal_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[e5]"></a>can2_mode_init</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, can.o(i.can2_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = can2_mode_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[e7]"></a>can2_sensor_setmsg</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gimbal_app.o(i.can2_sensor_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_sensor_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[e8]"></a>can2_yaw_setmsg</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gimbal_app.o(i.can2_yaw_setmsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can2_yaw_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[72]"></a>cap_timer_callback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, capacitor_control.o(i.cap_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cap_timer_callback &rArr; can1_cap_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_chassis_power_limit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_cap_setmsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_task.o(i.timer_send_create)
</UL>
<P><STRONG><a name="[ec]"></a>chassis_app_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, chassis_app.o(i.chassis_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = chassis_app_init &rArr; timer_send_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_machine_communication
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_GYRO_INIT_PC11_RX_PC10_TX
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[f3]"></a>chassis_behaviour_mode_set</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, chassis_behaviour.o(i.chassis_behaviour_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = chassis_behaviour_mode_set &rArr; chassis_set_remote &rArr; chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_reload
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgimbal_set_remote
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescue_set_remote
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_remote
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescue_clap
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rotation
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rescue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_mode_choose
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_independent
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_follow
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_remote_mode_choose
</UL>

<P><STRONG><a name="[61]"></a>chassis_can1_callback</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, can_1_receive.o(i.chassis_can1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chassis_can1_callback &rArr; motor_actual_position &rArr; check_codevalue
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_actual_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_app.o(i.chassis_app_init)
</UL>
<P><STRONG><a name="[62]"></a>chassis_can2_callback</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, can_2_receive.o(i.chassis_can2_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_can2_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_app.o(i.chassis_app_init)
</UL>
<P><STRONG><a name="[11e]"></a>chassis_power_limit_control</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, capacitor_control.o(i.chassis_power_limit_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = chassis_power_limit_control &rArr; increment_pid &rArr; variable_integral_coefficient
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_chassis_power_limit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_pid
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_remote
</UL>

<P><STRONG><a name="[64]"></a>chassis_rc_callback</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, rc.o(i.chassis_rc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = chassis_rc_callback &rArr; rc_lost_time_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_deadline_limit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_lost_time_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_app.o(i.chassis_app_init)
</UL>
<P><STRONG><a name="[63]"></a>chassis_rc_lost_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc.o(i.chassis_rc_lost_time))
<BR>[Address Reference Count : 1]<UL><LI> chassis_app.o(i.chassis_app_init)
</UL>
<P><STRONG><a name="[fd]"></a>chassis_set_remote</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, chassis_task.o(i.chassis_set_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = chassis_set_remote &rArr; chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_power_limit_control
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_order_filter
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_accelerated_control
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[65]"></a>chassis_task</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, chassis_task.o(i.chassis_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chassis_task &rArr; chassis_controlwork &rArr; chassis_remote_mode_choose &rArr; chassis_behaviour_mode_set &rArr; chassis_set_remote &rArr; chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_to_gimbal
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_controlwork
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_syaw_setmsg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_spitch_setmsg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_rescue_setmsg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_setmsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_app.o(i.chassis_app_init)
</UL>
<P><STRONG><a name="[100]"></a>chassis_task_off</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, chassis_task.o(i.chassis_task_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = chassis_task_off &rArr; can1_chassis_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_setmsg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_chassis_gimbal_fire
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[18d]"></a>check_codevalue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rm_motor.o(i.check_codevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_codevalue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_actual_position
</UL>

<P><STRONG><a name="[12a]"></a>correct_yaw_zero</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, photoelectric.o(i.correct_yaw_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = correct_yaw_zero &rArr; yaw_zero_value
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_value
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[108]"></a>cos_calculate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.cos_calculate))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rotation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_independent
</UL>

<P><STRONG><a name="[12d]"></a>delay_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[ef]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[12f]"></a>delay_us</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6d]"></a>detect_task</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, detect_task.o(i.detect_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = detect_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.sys_task)
</UL>
<P><STRONG><a name="[1d8]"></a>fifo_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fifo_buff.o(i.fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[130]"></a>fifo_read_buff</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fifo_buff.o(i.fifo_read_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_dma_send
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_data_reception
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_reception
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_dma_send
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_read_data
</UL>

<P><STRONG><a name="[133]"></a>fifo_write_buff</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fifo_buff.o(i.fifo_write_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_write_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_dma_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_dma_send
</UL>

<P><STRONG><a name="[13c]"></a>fire_task_off</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shoot_task.o(i.fire_task_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fire_task_off
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_off
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snail_motor_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_task
</UL>

<P><STRONG><a name="[124]"></a>first_order_filter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, maths.o(i.first_order_filter))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_auto
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_remote
</UL>

<P><STRONG><a name="[118]"></a>first_order_filter_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maths.o(i.first_order_filter_init))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[eb]"></a>float_abs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.float_abs))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_accelerated_control
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_integral_coefficient
</UL>

<P><STRONG><a name="[120]"></a>float_limit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, maths.o(i.float_limit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_power_limit_control
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mk_data_process
</UL>

<P><STRONG><a name="[140]"></a>friction_wheel_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pwm.o(i.friction_wheel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = friction_wheel_init &rArr; tim4_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tim4_pwm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[139]"></a>gd_motor_control</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, shoot_task.o(i.gd_motor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gd_motor_control &rArr; motor_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[116]"></a>get_chassis_behaviour_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chassis_behaviour.o(i.get_chassis_behaviour_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[10c]"></a>get_chassis_motor_measure_point</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can_1_receive.o(i.get_chassis_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[1c9]"></a>get_chassis_task_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chassis_app.o(i.get_chassis_task_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[168]"></a>get_clip_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_clip_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[114]"></a>get_fire_control_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, shoot_task.o(i.get_fire_control_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[13b]"></a>get_fire_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_fire_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_param_init
</UL>

<P><STRONG><a name="[169]"></a>get_flip_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_flip_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[161]"></a>get_gimbal_behaviour_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gimbal_behaviour.o(i.get_gimbal_behaviour_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[ca]"></a>get_gimbal_control_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gimbal_task.o(i.get_gimbal_control_point))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task
</UL>

<P><STRONG><a name="[1ca]"></a>get_gimbal_task_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gimbal_app.o(i.get_gimbal_task_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[162]"></a>get_imu_control_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu.o(i.get_imu_control_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[15f]"></a>get_pitch_gimbal_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_pitch_gimbal_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[10b]"></a>get_remote_control_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc.o(i.get_remote_control_point))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_param_init
</UL>

<P><STRONG><a name="[110]"></a>get_rescue_clap_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_rescue_clap_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[10f]"></a>get_rescue_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_rescue_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[1cb]"></a>get_shoot_task_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, shoot_task.o(i.get_shoot_task_handle))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[10e]"></a>get_spitch_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_spitch_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[115]"></a>get_supercap_control_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_supercap_control_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[10d]"></a>get_syaw_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_syaw_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[1c8]"></a>get_sys_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(i.get_sys_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[167]"></a>get_telescoping_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_telescoping_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[166]"></a>get_translation_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_translation_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[165]"></a>get_uplift_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_1_receive.o(i.get_uplift_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[174]"></a>get_yaw_different_angle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rm_motor.o(i.get_yaw_different_angle))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[15e]"></a>get_yaw_gimbal_motor_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_2_receive.o(i.get_yaw_gimbal_motor_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[111]"></a>get_yaw_receive_measure_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, can_2_receive.o(i.get_yaw_receive_measure_point))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[146]"></a>gimbal_app_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gimbal_app.o(i.gimbal_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gimbal_app_init &rArr; imu_control_init &rArr; usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart6_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friction_wheel_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_gpio_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_two_zero_gpio_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_on
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;automatic_aiming_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_machine_communication
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_control_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[14e]"></a>gimbal_automatic_work</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, gimbal_task.o(i.gimbal_automatic_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gimbal_automatic_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimba_jscope_print_curve
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_fp32_constrain
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_change_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_auto
</UL>

<P><STRONG><a name="[153]"></a>gimbal_behaviour_mode_set</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.gimbal_behaviour_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gimbal_behaviour_mode_set &rArr; gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_reload
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_third
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_second
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_auto
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flap_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_remote_mode_choose
</UL>

<P><STRONG><a name="[66]"></a>gimbal_can1_callback</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, can_1_receive.o(i.gimbal_can1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gimbal_can1_callback &rArr; motor_actual_position &rArr; check_codevalue
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_actual_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal_app.o(i.gimbal_app_init)
</UL>
<P><STRONG><a name="[67]"></a>gimbal_can2_callback</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, can_2_receive.o(i.gimbal_can2_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gimbal_can2_callback &rArr; motor_actual_position &rArr; check_codevalue
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_lost_time_refresh
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_actual_position
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal_app.o(i.gimbal_app_init)
</UL>
<P><STRONG><a name="[178]"></a>gimbal_ch_retain</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gimbal_behaviour.o(i.gimbal_ch_retain))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
</UL>

<P><STRONG><a name="[177]"></a>gimbal_ch_set0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gimbal_behaviour.o(i.gimbal_ch_set0))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
</UL>

<P><STRONG><a name="[14f]"></a>gimbal_change_pid</STRONG> (Thumb, 572 bytes, Stack size 72 bytes, gimbal_task.o(i.gimbal_change_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gimbal_change_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
</UL>

<P><STRONG><a name="[16c]"></a>gimbal_manual_work</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, gimbal_task.o(i.gimbal_manual_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimba_jscope_print_curve
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_fp32_constrain
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_order_filter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sliding_mean_filter
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual
</UL>

<P><STRONG><a name="[68]"></a>gimbal_rc_lost_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_2_receive.o(i.gimbal_rc_lost_time))
<BR>[Address Reference Count : 1]<UL><LI> gimbal_app.o(i.gimbal_app_init)
</UL>
<P><STRONG><a name="[69]"></a>gimbal_task</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gimbal_task.o(i.gimbal_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gimbal_task &rArr; gimbal_task_control &rArr; gimbal_remote_mode_choose &rArr; gimbal_behaviour_mode_set &rArr; gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Sensor_Val
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0_Data_Deal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_yaw_setmsg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_sensor_setmsg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_gimbal_setmsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_gimbal_setmsg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_function_setmsg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_flip_setmsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal_app.o(i.gimbal_app_init)
</UL>
<P><STRONG><a name="[155]"></a>gimbal_task_off</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, gimbal_task.o(i.gimbal_task_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gimbal_task_off &rArr; can2_yaw_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_ch_set0
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_ch_retain
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_yaw_setmsg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_gimbal_setmsg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
</UL>

<P><STRONG><a name="[172]"></a>gyro_usart_iwdg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, imu.o(i.gyro_usart_iwdg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gyro_usart_iwdg &rArr; usart1_dma_send &rArr; fifo_write_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_dma_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[1e4]"></a>hex2Float</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, visual.o(i.hex2Float))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_data_reception
</UL>

<P><STRONG><a name="[17d]"></a>hw_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, init.o(i.hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hw_init &rArr; can2_mode_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_mode_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_mode_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
</UL>

<P><STRONG><a name="[147]"></a>imu_control_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imu.o(i.imu_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = imu_control_init &rArr; usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[173]"></a>imu_data_reception</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, imu.o(i.imu_data_reception))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = imu_data_reception &rArr; fifo_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[11f]"></a>increment_pid</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, pid.o(i.increment_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = increment_pid &rArr; variable_integral_coefficient
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_integral_coefficient
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_power_limit_control
</UL>

<P><STRONG><a name="[123]"></a>int16_t_abs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, maths.o(i.int16_t_abs))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_data_is_error
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translation_behav
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telescoping_behav
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_behav
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescue_clap
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rescue
</UL>

<P><STRONG><a name="[107]"></a>int32_limit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.int32_limit))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_follow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_regulator
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
</UL>

<P><STRONG><a name="[e4]"></a>iwdg_feed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iwdg.o(i.iwdg_feed))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rc_callback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_lost_time_refresh
</UL>

<P><STRONG><a name="[180]"></a>iwdg_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iwdg.o(i.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iwdg_init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[14a]"></a>laser_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.laser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = laser_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[13d]"></a>laser_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.laser_off))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_task_off
</UL>

<P><STRONG><a name="[138]"></a>laser_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.laser_on))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[17f]"></a>led_init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[f6]"></a>location_pid_int32</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, pid.o(i.location_pid_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_follow
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
</UL>

<P><STRONG><a name="[151]"></a>loop_fp32_constrain</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, maths.o(i.loop_fp32_constrain))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgimbal_set_remote
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[102]"></a>motor_actual_position</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rm_motor.o(i.motor_actual_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_actual_position &rArr; check_codevalue
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_codevalue
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_limiting_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_can2_callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_can1_callback
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_can1_callback
</UL>

<P><STRONG><a name="[150]"></a>motor_position_Stepping</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rm_motor.o(i.motor_position_Stepping))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_in_processing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_regulator
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
</UL>

<P><STRONG><a name="[11d]"></a>motor_position_speed_control</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rm_motor.o(i.motor_position_speed_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_position_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_pid_calc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_pid_calc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sgimbal_set_remote
</UL>

<P><STRONG><a name="[11c]"></a>motor_speed_control</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rm_motor.o(i.motor_speed_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_pid_calc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_pid_calc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rescue_set_remote
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_motor_control
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[190]"></a>normal_control</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, init.o(i.normal_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = normal_control &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
</UL>

<P><STRONG><a name="[191]"></a>out_of_control</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, init.o(i.out_of_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = out_of_control &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
</UL>

<P><STRONG><a name="[6f]"></a>outctl_task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, security_task.o(i.outctl_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = outctl_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_out_ctrl_protect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.sys_task)
</UL>
<P><STRONG><a name="[15c]"></a>pid_clear</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pid.o(i.pid_clear))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_change_pid
</UL>

<P><STRONG><a name="[119]"></a>pid_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pid.o(i.pid_init))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_param_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_change_pid
</UL>

<P><STRONG><a name="[18f]"></a>pid_regulator</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, pid.o(i.pid_regulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pid_regulator &rArr; variable_integral_coefficient
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;variable_integral_coefficient
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
</UL>

<P><STRONG><a name="[1bb]"></a>pvPortMalloc</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1e9]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1aa]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[16a]"></a>rc_data_is_error</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rc.o(i.rc_data_is_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rc_data_is_error
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[122]"></a>rc_deadline_limit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rc.o(i.rc_deadline_limit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rc_callback
</UL>

<P><STRONG><a name="[135]"></a>re_can2_shooter_heat0_speed_limit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_2_receive.o(i.re_can2_shooter_heat0_speed_limit))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[112]"></a>re_chassis_gimbal_sensorL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_2_receive.o(i.re_chassis_gimbal_sensorL))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[113]"></a>re_chassis_gimbal_sensorR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_2_receive.o(i.re_chassis_gimbal_sensorR))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
</UL>

<P><STRONG><a name="[e9]"></a>referee_chassis_power_limit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee_deal.o(i.referee_chassis_power_limit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_power_limit_control
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cap_timer_callback
</UL>

<P><STRONG><a name="[71]"></a>referee_read_data</STRONG> (Thumb, 302 bytes, Stack size 552 bytes, referee_deal.o(i.referee_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = referee_read_data &rArr; fifo_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_task.o(i.timer_receive_create)
</UL>
<P><STRONG><a name="[1c4]"></a>referee_shooter_id1_17mm_cooling_heat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee_deal.o(i.referee_shooter_id1_17mm_cooling_heat))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_hot_limit
</UL>

<P><STRONG><a name="[1c3]"></a>referee_shooter_id1_17mm_cooling_limit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee_deal.o(i.referee_shooter_id1_17mm_cooling_limit))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_hot_limit
</UL>

<P><STRONG><a name="[de]"></a>referee_shooter_id1_17mm_speed_limit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee_deal.o(i.referee_shooter_id1_17mm_speed_limit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_4002_send
</UL>

<P><STRONG><a name="[ed]"></a>remote_control_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rc.o(i.remote_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = remote_control_init &rArr; usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[101]"></a>remote_reload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rc.o(i.remote_reload))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[ff]"></a>rescue_set_remote</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, chassis_task.o(i.rescue_set_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rescue_set_remote &rArr; motor_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[171]"></a>return_vl53l0_distance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0.o(i.return_vl53l0_distance))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[170]"></a>return_vl53l0_initdistance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0.o(i.return_vl53l0_initdistance))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[6e]"></a>safecheck_task</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, security_task.o(i.safecheck_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = safecheck_task &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_data_is_error
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_point
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_control
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.sys_task)
</UL>
<P><STRONG><a name="[14c]"></a>sensor_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, key.o(i.sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensor_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[6c]"></a>services_task</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(i.services_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = services_task &rArr; task_init &rArr; chassis_app_init &rArr; timer_send_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.start_task)
</UL>
<P><STRONG><a name="[fe]"></a>sgimbal_set_remote</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, chassis_task.o(i.sgimbal_set_remote))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sgimbal_set_remote &rArr; motor_position_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_fp32_constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[1c2]"></a>shoot_app_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, shoot_task.o(i.shoot_app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = shoot_app_init &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_init
</UL>

<P><STRONG><a name="[137]"></a>shoot_hot_limit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, shoot_task.o(i.shoot_hot_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shoot_hot_limit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_shooter_id1_17mm_cooling_limit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;referee_shooter_id1_17mm_cooling_heat
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[6b]"></a>shoot_task</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, shoot_task.o(i.shoot_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = shoot_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_task_off
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_param_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot_task.o(i.shoot_app_init)
</UL>
<P><STRONG><a name="[109]"></a>sin_calculate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, maths.o(i.sin_calculate))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_twist
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rotation
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_independent
</UL>

<P><STRONG><a name="[16d]"></a>sliding_mean_filter</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, maths.o(i.sliding_mean_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sliding_mean_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
</UL>

<P><STRONG><a name="[16b]"></a>sliding_mean_filter_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, maths.o(i.sliding_mean_filter_init))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_data_init
</UL>

<P><STRONG><a name="[18a]"></a>start_task</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, init.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = start_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>step_in_processing</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pid.o(i.step_in_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_Stepping
</UL>

<P><STRONG><a name="[1bf]"></a>sys_task</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, init.o(i.sys_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = sys_task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
</UL>

<P><STRONG><a name="[192]"></a>system_out_ctrl_protect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, security_task.o(i.system_out_ctrl_protect))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outctl_task
</UL>

<P><STRONG><a name="[f5]"></a>system_state_return</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_state.o(i.system_state_return))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_remote
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_mode_choose
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_task
</UL>

<P><STRONG><a name="[11a]"></a>system_state_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_state.o(i.system_state_set))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_mode_choose
</UL>

<P><STRONG><a name="[1c0]"></a>task_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(i.task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = task_init &rArr; chassis_app_init &rArr; timer_send_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_app_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shoot_task_handle
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_task_handle
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_task_handle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
</UL>

<P><STRONG><a name="[141]"></a>tim4_pwm_init</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, pwm.o(i.tim4_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tim4_pwm_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;friction_wheel_init
</UL>

<P><STRONG><a name="[f1]"></a>timer_receive_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_task.o(i.timer_receive_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timer_receive_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[f0]"></a>timer_send_create</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_task.o(i.timer_send_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = timer_send_create &rArr; xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[ee]"></a>upper_machine_communication</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, upper_machine.o(i.upper_machine_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = upper_machine_communication &rArr; usart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
</UL>

<P><STRONG><a name="[17c]"></a>usart1_dma_send</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usart1.o(i.usart1_dma_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart1_dma_send &rArr; fifo_write_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_usart_iwdg
</UL>

<P><STRONG><a name="[181]"></a>usart1_init</STRONG> (Thumb, 760 bytes, Stack size 136 bytes, usart1.o(i.usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_control_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_control_init
</UL>

<P><STRONG><a name="[1d4]"></a>usart2_init</STRONG> (Thumb, 388 bytes, Stack size 96 bytes, usart2.o(i.usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_machine_communication
</UL>

<P><STRONG><a name="[1d9]"></a>usart3_dma_send</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usart3.o(i.usart3_dma_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usart3_dma_send &rArr; fifo_write_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_send_data
</UL>

<P><STRONG><a name="[c9]"></a>usart3_init</STRONG> (Thumb, 456 bytes, Stack size 104 bytes, usart3.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;automatic_aiming_init
</UL>

<P><STRONG><a name="[14b]"></a>usart6_init</STRONG> (Thumb, 448 bytes, Stack size 104 bytes, usart6.o(i.usart6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart6_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[194]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a5]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, detect_task.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[19a]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1a9]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[196]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[195]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[125]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[127]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[1a4]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1e5]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1db]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[19c]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1b5]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[a1]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outctl_task
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_task
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Location_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_task
</UL>

<P><STRONG><a name="[1be]"></a>vTaskDelayUntil</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
</UL>

<P><STRONG><a name="[1c1]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_task
</UL>

<P><STRONG><a name="[1ba]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1df]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1dd]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1e0]"></a>vTaskPriorityInherit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[cd]"></a>vTaskResume</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_control
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_control
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task_remove_hang
</UL>

<P><STRONG><a name="[1ea]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18b]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>vTaskSuspend</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_of_control
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normal_control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task_hang
</UL>

<P><STRONG><a name="[19e]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[86]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[175]"></a>visual_data_reception</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, visual.o(i.visual_data_reception))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = visual_data_reception &rArr; fifo_read_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2Float
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[176]"></a>visual_send_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, visual.o(i.visual_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = visual_send_data &rArr; usart3_dma_send &rArr; fifo_write_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_dma_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[1e3]"></a>xPortStartScheduler</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a9]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19b]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1b3]"></a>xQueueGenericReceive</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1a7]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1ec]"></a>xQueueGenericSend</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1ed]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1eb]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[f2]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_app_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_app_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_task
</UL>

<P><STRONG><a name="[a8]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e3]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_lost_time_refresh
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_lost_time_refresh
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safecheck_task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
</UL>

<P><STRONG><a name="[1e8]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a3]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1b9]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[19f]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1d3]"></a>xTimerCreate</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
</UL>

<P><STRONG><a name="[1e2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b0]"></a>xTimerGenericCommand</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_send_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_receive_create
</UL>

<P><STRONG><a name="[149]"></a>yaw_two_zero_gpio_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, photoelectric.o(i.yaw_two_zero_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaw_two_zero_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[148]"></a>yaw_zero_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, photoelectric.o(i.yaw_zero_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = yaw_zero_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_app_init
</UL>

<P><STRONG><a name="[12b]"></a>yaw_zero_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, photoelectric.o(i.yaw_zero_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yaw_zero_value
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_yaw_zero
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PYR_Deal
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0_Data_Deal
</UL>

<P><STRONG><a name="[1ee]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[1f1]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1f5]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PYR_Deal
</UL>

<P><STRONG><a name="[230]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1c7]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_in_processing
</UL>

<P><STRONG><a name="[1f4]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[231]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PYR_Deal
</UL>

<P><STRONG><a name="[1f6]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1f0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1f3]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0_Data_Deal
</UL>

<P><STRONG><a name="[1f7]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0_Data_Deal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_in_processing
</UL>

<P><STRONG><a name="[1f9]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1fa]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7a]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[232]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[233]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1ef]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>SetSysClock</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>CheckITStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[1a1]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1a2]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a6]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1ad]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1ae]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b8]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[193]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[197]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[19d]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a0]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[73]"></a>prvIdleTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1a8]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[198]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1de]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1e1]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[199]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1b7]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1ab]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[1ac]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1af]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1b1]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b4]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b2]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1b6]"></a>prvSwitchTimerLists</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[74]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1bc]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1bd]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6a]"></a>prvTaskExitError</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[e2]"></a>can2_lost_time_refresh</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, can_2_receive.o(i.can2_lost_time_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can2_lost_time_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_can2_callback
</UL>

<P><STRONG><a name="[a3]"></a>PYR_Deal</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, imu.o(i.PYR_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PYR_Deal &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>rc_lost_time_refresh</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rc.o(i.rc_lost_time_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_lost_time_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_rc_callback
</UL>

<P><STRONG><a name="[a0]"></a>Gimbal_Location_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, calibrate_task.o(i.Gimbal_Location_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gimbal_Location_Init &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task_hang
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task
</UL>

<P><STRONG><a name="[134]"></a>fire_control</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, shoot_task.o(i.fire_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fire_control &rArr; gd_motor_control &rArr; motor_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laser_on
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_can2_shooter_heat0_speed_limit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_hot_limit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_motor_control
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snail_motor_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_task
</UL>

<P><STRONG><a name="[13a]"></a>fire_param_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, shoot_task.o(i.fire_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fire_param_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_point
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fire_motor_measure_point
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snail_motor_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shoot_task
</UL>

<P><STRONG><a name="[136]"></a>snail_motor_pwm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, shoot_task.o(i.snail_motor_pwm))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_task_off
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_param_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fire_control
</UL>

<P><STRONG><a name="[fb]"></a>chassis_follow</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, chassis_behaviour.o(i.chassis_follow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chassis_follow &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_pid_int32
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[fc]"></a>chassis_independent</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, chassis_behaviour.o(i.chassis_independent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chassis_independent
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_calculate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[f4]"></a>chassis_mode_choose</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, chassis_behaviour.o(i.chassis_mode_choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chassis_mode_choose &rArr; mk_data_process
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mk_data_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[f9]"></a>chassis_rescue</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, chassis_behaviour.o(i.chassis_rescue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chassis_rescue
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[f8]"></a>chassis_rotation</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, chassis_behaviour.o(i.chassis_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chassis_rotation
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_calculate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[f7]"></a>chassis_twist</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, chassis_behaviour.o(i.chassis_twist))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chassis_twist
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_calculate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[11b]"></a>mk_data_process</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, chassis_behaviour.o(i.mk_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mk_data_process
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_mode_choose
</UL>

<P><STRONG><a name="[fa]"></a>rescue_clap</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, chassis_behaviour.o(i.rescue_clap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rescue_clap
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>

<P><STRONG><a name="[ea]"></a>chassis_accelerated_control</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, chassis_task.o(i.chassis_accelerated_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_set_remote
</UL>

<P><STRONG><a name="[103]"></a>chassis_controlwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chassis_task.o(i.chassis_controlwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = chassis_controlwork &rArr; chassis_remote_mode_choose &rArr; chassis_behaviour_mode_set &rArr; chassis_set_remote &rArr; chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_remote_mode_choose
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_pid_calc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_data_update
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[104]"></a>chassis_data_update</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, chassis_task.o(i.chassis_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chassis_data_update
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_controlwork
</UL>

<P><STRONG><a name="[10a]"></a>chassis_init</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, chassis_task.o(i.chassis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = chassis_init &rArr; chassis_task_off &rArr; can1_chassis_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_point
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_PYR_t
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_chassis_gimbal_sensorR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_chassis_gimbal_sensorL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yaw_receive_measure_point
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_syaw_motor_measure_point
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_supercap_control_point
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spitch_motor_measure_point
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rescue_motor_measure_point
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rescue_clap_motor_measure_point
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_motor_measure_point
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_order_filter_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_data_update
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task_off
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chassis_behaviour_point
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fire_control_point
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[106]"></a>chassis_pid_calc</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, chassis_task.o(i.chassis_pid_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chassis_pid_calc &rArr; motor_position_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_controlwork
</UL>

<P><STRONG><a name="[105]"></a>chassis_remote_mode_choose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, chassis_task.o(i.chassis_remote_mode_choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = chassis_remote_mode_choose &rArr; chassis_behaviour_mode_set &rArr; chassis_set_remote &rArr; chassis_accelerated_control
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_behaviour_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_controlwork
</UL>

<P><STRONG><a name="[126]"></a>chassis_to_gimbal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, chassis_task.o(i.chassis_to_gimbal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = chassis_to_gimbal &rArr; can2_chassis_rc_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_rc_setmsg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_chassis_mk_setmsg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_4002_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[129]"></a>clip_behav</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.clip_behav))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_third
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_second
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_first
</UL>

<P><STRONG><a name="[13e]"></a>flap_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gimbal_behaviour.o(i.flap_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flap_reset &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[13f]"></a>flip_behav</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, gimbal_behaviour.o(i.flip_behav))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_third
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_second
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_first
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flap_reset
</UL>

<P><STRONG><a name="[14d]"></a>gimbal_auto</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, gimbal_behaviour.o(i.gimbal_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gimbal_auto &rArr; gimbal_automatic_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_order_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[15b]"></a>gimbal_manual</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, gimbal_behaviour.o(i.gimbal_manual))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_limit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_fp32_constrain
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[154]"></a>gimbal_mode_choose</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gimbal_behaviour.o(i.gimbal_mode_choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gimbal_mode_choose &rArr; gimbal_task_off &rArr; can2_yaw_setmsg &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_task_remove_hang
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mk_data_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_return
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[158]"></a>grasp_first</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.grasp_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grasp_first &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translation_behav
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telescoping_behav
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[156]"></a>grasp_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.grasp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grasp_init &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uplift_behav
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translation_behav
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telescoping_behav
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[157]"></a>grasp_reset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.grasp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grasp_reset &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uplift_behav
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translation_behav
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[159]"></a>grasp_second</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.grasp_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grasp_second &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telescoping_behav
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[15a]"></a>grasp_third</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.grasp_third))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = grasp_third &rArr; flip_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telescoping_behav
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flip_behav
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>

<P><STRONG><a name="[16e]"></a>mk_data_process</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gimbal_behaviour.o(i.mk_data_process))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_mode_choose
</UL>

<P><STRONG><a name="[179]"></a>telescoping_behav</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.telescoping_behav))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = telescoping_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_third
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_second
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_first
</UL>

<P><STRONG><a name="[17a]"></a>translation_behav</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gimbal_behaviour.o(i.translation_behav))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = translation_behav
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_t_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_first
</UL>

<P><STRONG><a name="[17b]"></a>uplift_behav</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, gimbal_behaviour.o(i.uplift_behav))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uplift_behav
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grasp_init
</UL>

<P><STRONG><a name="[152]"></a>Gimba_jscope_print_curve</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, gimbal_task.o(i.Gimba_jscope_print_curve))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_manual_work
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_automatic_work
</UL>

<P><STRONG><a name="[142]"></a>function_control</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gimbal_task.o(i.function_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = function_control &rArr; gimbal_remote_mode_choose &rArr; gimbal_behaviour_mode_set &rArr; gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_remote_mode_choose
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_pid_calc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_data_update
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[143]"></a>function_data_update</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, gimbal_task.o(i.function_data_update))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_control
</UL>

<P><STRONG><a name="[145]"></a>function_pid_calc</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, gimbal_task.o(i.function_pid_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = function_pid_calc &rArr; motor_position_speed_control &rArr; location_pid_int32
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_position_speed_control
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_speed_control
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_control
</UL>

<P><STRONG><a name="[15d]"></a>gimbal_data_init</STRONG> (Thumb, 768 bytes, Stack size 40 bytes, gimbal_task.o(i.gimbal_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gimbal_data_init &rArr; gimbal_change_pid
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Sensor_t
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Auto_Control_Point
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_data_is_error
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remote_control_point
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_imu_control_point
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yaw_gimbal_motor_measure_point
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uplift_measure_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_translation_measure_point
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_telescoping_measure_point
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pitch_gimbal_motor_measure_point
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flip_measure_point
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clip_measure_point
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_VL53L0_t
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_off
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gimbal_behaviour_point
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_order_filter_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fire_control_point
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sliding_mean_filter_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_change_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[144]"></a>gimbal_remote_mode_choose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gimbal_task.o(i.gimbal_remote_mode_choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gimbal_remote_mode_choose &rArr; gimbal_behaviour_mode_set &rArr; gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_behaviour_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task_control
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;function_control
</UL>

<P><STRONG><a name="[16f]"></a>gimbal_task_control</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, gimbal_task.o(i.gimbal_task_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gimbal_task_control &rArr; gimbal_remote_mode_choose &rArr; gimbal_behaviour_mode_set &rArr; gimbal_manual &rArr; gimbal_manual_work &rArr; motor_position_Stepping &rArr; step_in_processing &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yaw_zero_value
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_yaw_zero
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_R_Val
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Return_Smooth_L_Val
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_send_data
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;visual_data_reception
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_data_reception
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_usart_iwdg
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;re_can2_shooter_heat0_speed_limit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_vl53l0_initdistance
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;return_vl53l0_distance
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_remote_mode_choose
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_yaw_different_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_task
</UL>

<P><STRONG><a name="[131]"></a>min_fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo_buff.o(i.min_fifo))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write_buff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_read_buff
</UL>

<P><STRONG><a name="[182]"></a>variable_integral_coefficient</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, pid.o(i.variable_integral_coefficient))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = variable_integral_coefficient
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_pid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_regulator
</UL>

<P><STRONG><a name="[1f8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1f2]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
